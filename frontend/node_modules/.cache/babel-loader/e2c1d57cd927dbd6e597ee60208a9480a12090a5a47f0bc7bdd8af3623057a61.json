{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maste\\\\Documents\\\\Codes\\\\Websites\\\\web-isyaratlingo\\\\frontend\\\\src\\\\components\\\\ChartsUser.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport default function ChartsUser() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const getUsers = async () => {\n    const response = await axios.get(`http://localhost:5000/user`);\n    setUsers(response.data);\n  };\n  useEffect(() => {\n    getUsers();\n  }, []);\n  const formatTimestamp = timestamp => {\n    try {\n      const options = {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        timeZone: \"Asia/Jakarta\"\n      };\n      return new Intl.DateTimeFormat(\"en-US\", options).format(new Date(timestamp));\n    } catch (error) {\n      // Handle the error gracefully, e.g., by returning a default value\n      console.error(\"Error formatting timestamp:\", error);\n      return \"N/A\"; // You can replace this with a default value or an empty string\n    }\n  };\n\n  // Assuming you want to create a bar chart based on user registration months\n  const userMonths = users.map(user => {\n    const registrationDate = new Date(user.created_at);\n    return formatTimestamp(registrationDate);\n  });\n\n  // Count the number of users per month\n  const userCounts = userMonths.reduce((counts, month) => {\n    counts[month] = (counts[month] || 0) + 1;\n    return counts;\n  }, {});\n  const labels = Object.keys(userCounts); // Unique registration months\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Users Created by Month\",\n      data: labels.map(month => userCounts[month]),\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\" // Adjust the color as needed\n    }]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Users Created by Month\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 12\n  }, this);\n}\n_s(ChartsUser, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = ChartsUser;\nvar _c;\n$RefreshReg$(_c, \"ChartsUser\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","useState","useEffect","axios","jsxDEV","_jsxDEV","register","ChartsUser","_s","users","setUsers","getUsers","response","get","data","formatTimestamp","timestamp","options","year","month","day","timeZone","Intl","DateTimeFormat","format","Date","error","console","userMonths","map","user","registrationDate","created_at","userCounts","reduce","counts","labels","Object","keys","datasets","label","backgroundColor","responsive","plugins","legend","position","title","display","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Maste/Documents/Codes/Websites/web-isyaratlingo/frontend/src/components/ChartsUser.jsx"],"sourcesContent":["import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from \"chart.js\";\r\n  import { Bar } from \"react-chartjs-2\";\r\n  import { useState, useEffect } from \"react\";\r\n  import axios from \"axios\";\r\n  \r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n  \r\n  export default function ChartsUser() {\r\n    const [users, setUsers] = useState([]);\r\n  \r\n    const getUsers = async () => {\r\n      const response = await axios.get(`http://localhost:5000/user`);\r\n      setUsers(response.data);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getUsers();\r\n    }, []);\r\n  \r\n    const formatTimestamp = (timestamp) => {\r\n        try {\r\n          const options = {\r\n            year: \"numeric\",\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            timeZone: \"Asia/Jakarta\",\r\n          };\r\n          return new Intl.DateTimeFormat(\"en-US\", options).format(\r\n            new Date(timestamp)\r\n          );\r\n        } catch (error) {\r\n          // Handle the error gracefully, e.g., by returning a default value\r\n          console.error(\"Error formatting timestamp:\", error);\r\n          return \"N/A\"; // You can replace this with a default value or an empty string\r\n        }\r\n      };\r\n      \r\n  \r\n    // Assuming you want to create a bar chart based on user registration months\r\n    const userMonths = users.map((user) => {\r\n      const registrationDate = new Date(user.created_at);\r\n      return formatTimestamp(registrationDate);\r\n    });\r\n  \r\n    // Count the number of users per month\r\n    const userCounts = userMonths.reduce((counts, month) => {\r\n      counts[month] = (counts[month] || 0) + 1;\r\n      return counts;\r\n    }, {});\r\n  \r\n    const labels = Object.keys(userCounts); // Unique registration months\r\n    const data = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Users Created by Month\",\r\n          data: labels.map((month) => userCounts[month]),\r\n          backgroundColor: \"rgba(53, 162, 235, 0.5)\", // Adjust the color as needed\r\n        },\r\n      ],\r\n    };\r\n  \r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"top\",\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: \"Users Created by Month\",\r\n        },\r\n      },\r\n    };\r\n  \r\n    return <Bar options={options} data={data} />;\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}