{"ast":null,"code":"import cloneObject from 'date-fns/_lib/cloneObject/index.js';\nimport toDate from '../toDate/index.js';\nimport tzPattern from '../_lib/tzPattern/index.js';\nimport tzParseTimezone from '../_lib/tzParseTimezone/index.js';\nimport newDateUTC from '../_lib/newDateUTC/index.js';\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport default function zonedTimeToUtc(date, timeZone, options) {\n  if (typeof date === 'string' && !date.match(tzPattern)) {\n    var extendedOptions = cloneObject(options);\n    extendedOptions.timeZone = timeZone;\n    return toDate(date, extendedOptions);\n  }\n  var d = toDate(date, options);\n  var utc = newDateUTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()).getTime();\n  var offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));\n  return new Date(utc + offsetMilliseconds);\n}","map":{"version":3,"names":["cloneObject","toDate","tzPattern","tzParseTimezone","newDateUTC","zonedTimeToUtc","date","timeZone","options","match","extendedOptions","d","utc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTime","offsetMilliseconds","Date"],"sources":["C:/Users/Maste/Documents/Codes/Websites/web-isyaratlingo/frontend/node_modules/date-fns-tz/esm/zonedTimeToUtc/index.js"],"sourcesContent":["import cloneObject from 'date-fns/_lib/cloneObject/index.js'\nimport toDate from '../toDate/index.js'\nimport tzPattern from '../_lib/tzPattern/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone/index.js'\nimport newDateUTC from '../_lib/newDateUTC/index.js'\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport default function zonedTimeToUtc(date, timeZone, options) {\n  if (typeof date === 'string' && !date.match(tzPattern)) {\n    var extendedOptions = cloneObject(options)\n    extendedOptions.timeZone = timeZone\n    return toDate(date, extendedOptions)\n  }\n\n  var d = toDate(date, options)\n\n  var utc = newDateUTC(\n    d.getFullYear(),\n    d.getMonth(),\n    d.getDate(),\n    d.getHours(),\n    d.getMinutes(),\n    d.getSeconds(),\n    d.getMilliseconds()\n  ).getTime()\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc))\n\n  return new Date(utc + offsetMilliseconds)\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,eAAe,MAAM,kCAAkC;AAC9D,OAAOC,UAAU,MAAM,6BAA6B;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC9D,IAAI,OAAOF,IAAI,KAAK,QAAQ,IAAI,CAACA,IAAI,CAACG,KAAK,CAACP,SAAS,CAAC,EAAE;IACtD,IAAIQ,eAAe,GAAGV,WAAW,CAACQ,OAAO,CAAC;IAC1CE,eAAe,CAACH,QAAQ,GAAGA,QAAQ;IACnC,OAAON,MAAM,CAACK,IAAI,EAAEI,eAAe,CAAC;EACtC;EAEA,IAAIC,CAAC,GAAGV,MAAM,CAACK,IAAI,EAAEE,OAAO,CAAC;EAE7B,IAAII,GAAG,GAAGR,UAAU,CAClBO,CAAC,CAACE,WAAW,CAAC,CAAC,EACfF,CAAC,CAACG,QAAQ,CAAC,CAAC,EACZH,CAAC,CAACI,OAAO,CAAC,CAAC,EACXJ,CAAC,CAACK,QAAQ,CAAC,CAAC,EACZL,CAAC,CAACM,UAAU,CAAC,CAAC,EACdN,CAAC,CAACO,UAAU,CAAC,CAAC,EACdP,CAAC,CAACQ,eAAe,CAAC,CACpB,CAAC,CAACC,OAAO,CAAC,CAAC;EAEX,IAAIC,kBAAkB,GAAGlB,eAAe,CAACI,QAAQ,EAAE,IAAIe,IAAI,CAACV,GAAG,CAAC,CAAC;EAEjE,OAAO,IAAIU,IAAI,CAACV,GAAG,GAAGS,kBAAkB,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}