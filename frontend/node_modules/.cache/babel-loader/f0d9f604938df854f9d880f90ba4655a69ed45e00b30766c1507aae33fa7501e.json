{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maste\\\\Documents\\\\Codes\\\\Websites\\\\web-isyaratlingo\\\\frontend\\\\src\\\\components\\\\ChartsUser.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport default function ChartsUser() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const getUsers = async () => {\n    const response = await axios.get(`http://localhost:5000/user`);\n    setUsers(response.data);\n  };\n  useEffect(() => {\n    getUsers();\n  }, []);\n  useEffect(() => {\n    // Once users data is fetched, create a data structure for the chart\n    if (users.length > 0) {\n      const userCountsByMonth = Array(12).fill(0); // Initialize an array to hold user counts for each month\n\n      // Map through users and count them by month\n      users.forEach(user => {\n        const createdAt = new Date(user.created_At);\n        const month = createdAt.getMonth();\n        userCountsByMonth[month]++;\n      });\n\n      // Update the chart data with user counts\n      const data = {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n        datasets: [{\n          label: \"Users Created\",\n          data: userCountsByMonth,\n          backgroundColor: \"rgba(53, 162, 235, 0.5)\"\n        }]\n      };\n\n      // Set the chart data\n      setChartData(data);\n    }\n  }, [users]);\n  const [chartData, setChartData] = useState(null);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Users Created by Month\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    options: options,\n    data: chartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 12\n  }, this);\n}\n_s(ChartsUser, \"vMzfYw9uVUVKqv3vQCbuMFpaqpo=\");\n_c = ChartsUser;\nvar _c;\n$RefreshReg$(_c, \"ChartsUser\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","useState","useEffect","axios","jsxDEV","_jsxDEV","register","ChartsUser","_s","users","setUsers","getUsers","response","get","data","length","userCountsByMonth","Array","fill","forEach","user","createdAt","Date","created_At","month","getMonth","labels","datasets","label","backgroundColor","setChartData","chartData","options","responsive","plugins","legend","position","title","display","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Maste/Documents/Codes/Websites/web-isyaratlingo/frontend/src/components/ChartsUser.jsx"],"sourcesContent":["import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from \"chart.js\";\r\n  import { Bar } from \"react-chartjs-2\";\r\n  import { useState, useEffect } from \"react\";\r\n  import axios from \"axios\";\r\n  \r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n  \r\n  export default function ChartsUser() {\r\n    const [users, setUsers] = useState([]);\r\n  \r\n    const getUsers = async () => {\r\n      const response = await axios.get(`http://localhost:5000/user`);\r\n      setUsers(response.data);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getUsers();\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      // Once users data is fetched, create a data structure for the chart\r\n      if (users.length > 0) {\r\n        const userCountsByMonth = Array(12).fill(0); // Initialize an array to hold user counts for each month\r\n  \r\n        // Map through users and count them by month\r\n        users.forEach((user) => {\r\n          const createdAt = new Date(user.created_At);\r\n          const month = createdAt.getMonth();\r\n          userCountsByMonth[month]++;\r\n        });\r\n  \r\n        // Update the chart data with user counts\r\n        const data = {\r\n          labels: [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\",\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: \"Users Created\",\r\n              data: userCountsByMonth,\r\n              backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n            },\r\n          ],\r\n        };\r\n  \r\n        // Set the chart data\r\n        setChartData(data);\r\n      }\r\n    }, [users]);\r\n  \r\n    const [chartData, setChartData] = useState(null);\r\n  \r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"top\",\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: \"Users Created by Month\",\r\n        },\r\n      },\r\n    };\r\n  \r\n    return <Bar options={options} data={chartData} />;\r\n  }\r\n  "],"mappings":";;AAAA,SACIA,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1BZ,OAAO,CAACa,QAAQ,CACdZ,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,eAAe,SAASQ,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMU,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,4BAA2B,CAAC;IAC9DH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;EACzB,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdS,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAENT,SAAS,CAAC,MAAM;IACd;IACA,IAAIO,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,iBAAiB,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE7C;MACAT,KAAK,CAACU,OAAO,CAAEC,IAAI,IAAK;QACtB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,UAAU,CAAC;QAC3C,MAAMC,KAAK,GAAGH,SAAS,CAACI,QAAQ,CAAC,CAAC;QAClCT,iBAAiB,CAACQ,KAAK,CAAC,EAAE;MAC5B,CAAC,CAAC;;MAEF;MACA,MAAMV,IAAI,GAAG;QACXY,MAAM,EAAE,CACN,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;QACDC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,eAAe;UACtBd,IAAI,EAAEE,iBAAiB;UACvBa,eAAe,EAAE;QACnB,CAAC;MAEL,CAAC;;MAED;MACAC,YAAY,CAAChB,IAAI,CAAC;IACpB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAM,CAACsB,SAAS,EAAED,YAAY,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAM+B,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;MACR;IACF;EACF,CAAC;EAED,oBAAOlC,OAAA,CAACL,GAAG;IAACgC,OAAO,EAAEA,OAAQ;IAAClB,IAAI,EAAEiB;EAAU;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnD;AAACnC,EAAA,CAtEuBD,UAAU;AAAAqC,EAAA,GAAVrC,UAAU;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}