{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maste\\\\Documents\\\\Codes\\\\Websites\\\\web-isyaratlingo\\\\frontend\\\\src\\\\components\\\\ChartsUser.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport default function ChartsUser() {\n  _s();\n  const [userCounts, setUserCounts] = useState({});\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/user\");\n        const users = response.data;\n        const counts = {};\n        users.forEach(user => {\n          const createdDate = parseDate(user.created_at);\n          if (createdDate) {\n            const monthYear = createdDate.toLocaleDateString(\"en-US\", {\n              year: \"numeric\",\n              month: \"long\"\n            });\n            if (!counts[monthYear]) {\n              counts[monthYear] = 1;\n            } else {\n              counts[monthYear]++;\n            }\n          }\n        });\n        setUserCounts(counts);\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n    fetchUsers();\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: \"User Registration by Month\"\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Month\"\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: \"Number of Users\"\n        }\n      }\n    }\n  };\n  const labels = Object.keys(userCounts);\n  const data = {\n    labels,\n    datasets: [{\n      label: \"Users\",\n      data: Object.values(userCounts),\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\"\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 12\n  }, this);\n}\n\n// Improved date parsing function to handle various date formats\n_s(ChartsUser, \"lyHQuAHjQKyZp7f6UZJWDcTRyus=\");\n_c = ChartsUser;\nfunction parseDate(dateStr) {\n  const date = new Date(dateStr);\n  if (isNaN(date.getTime())) {\n    // Try parsing with a more flexible format\n    const parts = dateStr.split(/[- :]/);\n    if (parts.length === 6) {\n      // Assuming format like \"2023-08-22 17:11:27\"\n      return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n    }\n    return null; // Invalid format\n  }\n\n  return date;\n}\nvar _c;\n$RefreshReg$(_c, \"ChartsUser\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","useState","useEffect","axios","jsxDEV","_jsxDEV","register","ChartsUser","_s","userCounts","setUserCounts","fetchUsers","response","get","users","data","counts","forEach","user","createdDate","parseDate","created_at","monthYear","toLocaleDateString","year","month","error","console","options","responsive","plugins","legend","display","title","text","scales","x","y","beginAtZero","labels","Object","keys","datasets","label","values","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","dateStr","date","Date","isNaN","getTime","parts","split","length","$RefreshReg$"],"sources":["C:/Users/Maste/Documents/Codes/Websites/web-isyaratlingo/frontend/src/components/ChartsUser.jsx"],"sourcesContent":["import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from \"chart.js\";\r\n  import { Bar } from \"react-chartjs-2\";\r\n  import { useState, useEffect } from \"react\";\r\n  import axios from \"axios\";\r\n  \r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n  \r\n  export default function ChartsUser() {\r\n    const [userCounts, setUserCounts] = useState({});\r\n  \r\n    useEffect(() => {\r\n      const fetchUsers = async () => {\r\n        try {\r\n          const response = await axios.get(\"http://localhost:5000/user\");\r\n          const users = response.data;\r\n  \r\n          const counts = {};\r\n  \r\n          users.forEach((user) => {\r\n            const createdDate = parseDate(user.created_at);\r\n  \r\n            if (createdDate) {\r\n              const monthYear = createdDate.toLocaleDateString(\"en-US\", {\r\n                year: \"numeric\",\r\n                month: \"long\",\r\n              });\r\n  \r\n              if (!counts[monthYear]) {\r\n                counts[monthYear] = 1;\r\n              } else {\r\n                counts[monthYear]++;\r\n              }\r\n            }\r\n          });\r\n  \r\n          setUserCounts(counts);\r\n        } catch (error) {\r\n          console.error(\"Error fetching user data:\", error);\r\n        }\r\n      };\r\n  \r\n      fetchUsers();\r\n    }, []);\r\n  \r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: \"User Registration by Month\",\r\n        },\r\n      },\r\n      scales: {\r\n        x: {\r\n          title: {\r\n            display: true,\r\n            text: \"Month\",\r\n          },\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          title: {\r\n            display: true,\r\n            text: \"Number of Users\",\r\n          },\r\n        },\r\n      },\r\n    };\r\n  \r\n    const labels = Object.keys(userCounts);\r\n    const data = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Users\",\r\n          data: Object.values(userCounts),\r\n          backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n        },\r\n      ],\r\n    };\r\n  \r\n    return <Bar options={options} data={data} />;\r\n  }\r\n  \r\n  // Improved date parsing function to handle various date formats\r\n  function parseDate(dateStr) {\r\n    const date = new Date(dateStr);\r\n  \r\n    if (isNaN(date.getTime())) {\r\n      // Try parsing with a more flexible format\r\n      const parts = dateStr.split(/[- :]/);\r\n      if (parts.length === 6) {\r\n        // Assuming format like \"2023-08-22 17:11:27\"\r\n        return new Date(\r\n          parts[0],\r\n          parts[1] - 1,\r\n          parts[2],\r\n          parts[3],\r\n          parts[4],\r\n          parts[5]\r\n        );\r\n      }\r\n      return null; // Invalid format\r\n    }\r\n  \r\n    return date;\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}